(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["Spinner-docs-Spinner-mdx"],{

/***/ "./src/components/Spinner/docs/Spinner.mdx":
/*!*************************************************!*\
  !*** ./src/components/Spinner/docs/Spinner.mdx ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ \"./node_modules/@babel/runtime/helpers/interopRequireWildcard.js\");\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ \"./node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\n\nexports.__esModule = true;\nexports[\"default\"] = MDXContent;\nexports.col = exports.propsTables = exports.SpinnerIndicator = exports.SpinnerSize = exports.SpinnerCover = exports.SpinnerTip = exports.SpinnerBasic = void 0;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/objectWithoutPropertiesLoose */ \"./node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js\"));\n\nvar _extends2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/extends */ \"./node_modules/@babel/runtime/helpers/extends.js\"));\n\nvar _taggedTemplateLiteralLoose2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/taggedTemplateLiteralLoose */ \"./node_modules/@babel/runtime/helpers/taggedTemplateLiteralLoose.js\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inheritsLoose */ \"./node_modules/@babel/runtime/helpers/inheritsLoose.js\"));\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\n\nvar _react2 = __webpack_require__(/*! @mdx-js/react */ \"./node_modules/@mdx-js/react/dist/esm.js\");\n\nvar _ui = __webpack_require__(/*! @webapp-suite/ui */ \"./src/components/index.tsx\");\n\nvar _Example = _interopRequireDefault(__webpack_require__(/*! widgets/Example */ \"./site/widgets/Example/index.js\"));\n\nvar _PropsTable = _interopRequireDefault(__webpack_require__(/*! widgets/PropsTable */ \"./site/widgets/PropsTable/index.js\"));\n\nvar _Markdown = _interopRequireDefault(__webpack_require__(/*! widgets/Markdown */ \"./site/widgets/Markdown/index.js\"));\n\nvar _styledComponents = _interopRequireWildcard(__webpack_require__(/*! styled-components */ \"./node_modules/styled-components/dist/styled-components.browser.esm.js\"));\n\nfunction _templateObject3() {\n  var data = (0, _taggedTemplateLiteralLoose2[\"default\"])([\"\\n      height: 120px;\\n      line-height: 118px;\\n      color: #aaa;\\n      text-align: center;\\n      border: 1px dashed #ccc;\\n    \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = (0, _taggedTemplateLiteralLoose2[\"default\"])([\"\\n      position: relative;\\n      width: 60px;\\n      height: 60px;\\n      border: 3px solid #00aeff\\n      border-radius: 50%;\\n      border-bottom-color: transparent;\\n      animation: 1s ease-in-out infinite \", \";\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = (0, _taggedTemplateLiteralLoose2[\"default\"])([\"\\n      from {\\n        transform: translate3d(0, 0, 0) rotate(0deg);\\n      }\\n      to {\\n        transform: translate3d(0, 0, 0) rotate(360deg);\\n      }\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nvar SpinnerBasic = /*#__PURE__*/function (_React$Component) {\n  (0, _inheritsLoose2[\"default\"])(SpinnerBasic, _React$Component);\n\n  function SpinnerBasic() {\n    var _this;\n\n    _this = _React$Component.call(this) || this;\n    _this.state = {\n      isLoading: false\n    };\n    return _this;\n  }\n\n  var _proto = SpinnerBasic.prototype;\n\n  _proto.toggle = function toggle(value) {\n    this.setState({\n      isLoading: value\n    });\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var border = {\n      height: '120px',\n      lineHeight: '118px',\n      color: '#aaa',\n      textAlign: 'center',\n      border: '1px dashed #ccc'\n    };\n    return (0, _react2.mdx)(\"div\", null, (0, _react2.mdx)(\"div\", {\n      style: {\n        marginBottom: 16\n      }\n    }, \"Open Spinner\\uFF1A\", (0, _react2.mdx)(_ui.Switch, {\n      on: this.state.isLoading,\n      onChange: function onChange(value) {\n        return _this2.toggle(value);\n      },\n      mdxType: \"Switch\"\n    })), (0, _react2.mdx)(\"div\", {\n      style: border\n    }, (0, _react2.mdx)(_ui.Spinner, {\n      isLoading: this.state.isLoading,\n      mdxType: \"Spinner\"\n    }, \"Will be overridden by the load effect\")));\n  };\n\n  return SpinnerBasic;\n}(_react[\"default\"].Component);\n\nexports.SpinnerBasic = SpinnerBasic;\n\nvar SpinnerTip = /*#__PURE__*/function (_React$Component2) {\n  (0, _inheritsLoose2[\"default\"])(SpinnerTip, _React$Component2);\n\n  function SpinnerTip() {\n    var _this3;\n\n    _this3 = _React$Component2.call(this) || this;\n    _this3.state = {\n      isLoading: false\n    };\n    return _this3;\n  }\n\n  var _proto2 = SpinnerTip.prototype;\n\n  _proto2.toggle = function toggle(value) {\n    this.setState({\n      isLoading: value\n    });\n  };\n\n  _proto2.render = function render() {\n    var _this4 = this;\n\n    var border = {\n      height: '120px',\n      lineHeight: '118px',\n      color: '#aaa',\n      textAlign: 'center',\n      border: '1px dashed #ccc'\n    };\n    return (0, _react2.mdx)(\"div\", null, (0, _react2.mdx)(\"div\", {\n      style: {\n        marginBottom: 16\n      }\n    }, \"Open Spinner\\uFF1A\", (0, _react2.mdx)(_ui.Switch, {\n      on: this.state.isLoading,\n      onChange: function onChange(value) {\n        return _this4.toggle(value);\n      },\n      mdxType: \"Switch\"\n    })), (0, _react2.mdx)(\"div\", {\n      style: border\n    }, (0, _react2.mdx)(_ui.Spinner, {\n      tip: \"Loading...\",\n      isLoading: this.state.isLoading,\n      mdxType: \"Spinner\"\n    }, \"Custom description\")));\n  };\n\n  return SpinnerTip;\n}(_react[\"default\"].Component);\n\nexports.SpinnerTip = SpinnerTip;\n\nvar SpinnerCover = /*#__PURE__*/function (_React$Component3) {\n  (0, _inheritsLoose2[\"default\"])(SpinnerCover, _React$Component3);\n\n  function SpinnerCover() {\n    var _this5;\n\n    _this5 = _React$Component3.call(this) || this;\n    _this5.state = {\n      isLoading: false\n    };\n    return _this5;\n  }\n\n  var _proto3 = SpinnerCover.prototype;\n\n  _proto3.toggle = function toggle(value) {\n    this.setState({\n      isLoading: value\n    });\n  };\n\n  _proto3.render = function render() {\n    var _this6 = this;\n\n    var border = {\n      height: '120px',\n      lineHeight: '118px',\n      color: '#aaa',\n      textAlign: 'center',\n      border: '1px dashed #ccc'\n    };\n    return (0, _react2.mdx)(\"div\", null, (0, _react2.mdx)(\"div\", {\n      style: {\n        marginBottom: 16\n      }\n    }, \"Open Spinner\\uFF1A\", (0, _react2.mdx)(_ui.Switch, {\n      on: this.state.isLoading,\n      onChange: function onChange(value) {\n        return _this6.toggle(value);\n      },\n      mdxType: \"Switch\"\n    })), (0, _react2.mdx)(\"div\", {\n      style: border\n    }, (0, _react2.mdx)(_ui.Spinner, {\n      tip: \"Loading...\",\n      isLoading: this.state.isLoading,\n      mdxType: \"Spinner\"\n    }, \"White background\")), (0, _react2.mdx)(\"br\", null), (0, _react2.mdx)(\"div\", {\n      style: border\n    }, (0, _react2.mdx)(_ui.Spinner, {\n      tip: \"Loading...\",\n      cover: \"black\",\n      isLoading: this.state.isLoading,\n      mdxType: \"Spinner\"\n    }, \"Black background\")));\n  };\n\n  return SpinnerCover;\n}(_react[\"default\"].Component);\n\nexports.SpinnerCover = SpinnerCover;\n\nvar SpinnerSize = function SpinnerSize() {\n  return (0, _react2.mdx)(_react[\"default\"].Fragment, null, (0, _react2.mdx)(_ui.Spinner, {\n    size: \"sm\",\n    tip: \"Loading...\",\n    mdxType: \"Spinner\"\n  }), (0, _react2.mdx)(_ui.Spinner, {\n    tip: \"Loading...\",\n    mdxType: \"Spinner\"\n  }), (0, _react2.mdx)(_ui.Spinner, {\n    size: \"lg\",\n    tip: \"Loading...\",\n    mdxType: \"Spinner\"\n  }));\n};\n\nexports.SpinnerSize = SpinnerSize;\n\nvar SpinnerIndicator = /*#__PURE__*/function (_React$Component4) {\n  (0, _inheritsLoose2[\"default\"])(SpinnerIndicator, _React$Component4);\n\n  function SpinnerIndicator() {\n    var _this7;\n\n    _this7 = _React$Component4.call(this) || this;\n    _this7.state = {\n      isLoading: false\n    };\n    _this7.spinnerKeyFrames = (0, _styledComponents.keyframes)(_templateObject());\n    _this7.Indicator = _styledComponents[\"default\"].div(_templateObject2(), _this7.spinnerKeyFrames);\n    _this7.Border = _styledComponents[\"default\"].div(_templateObject3());\n    return _this7;\n  }\n\n  var _proto4 = SpinnerIndicator.prototype;\n\n  _proto4.toggle = function toggle(value) {\n    this.setState({\n      isLoading: value\n    });\n  };\n\n  _proto4.render = function render() {\n    var _this8 = this;\n\n    var Indicator = this.Indicator,\n        Border = this.Border;\n    return (0, _react2.mdx)(\"div\", null, (0, _react2.mdx)(\"div\", {\n      style: {\n        marginBottom: 16\n      }\n    }, \"Open Spinner\\uFF1A\", (0, _react2.mdx)(_ui.Switch, {\n      on: this.state.isLoading,\n      onChange: function onChange(value) {\n        return _this8.toggle(value);\n      },\n      mdxType: \"Switch\"\n    })), (0, _react2.mdx)(Border, {\n      mdxType: \"Border\"\n    }, (0, _react2.mdx)(_ui.Spinner, {\n      isLoading: this.state.isLoading,\n      indicator: (0, _react2.mdx)(Indicator, {\n        mdxType: \"Indicator\"\n      }),\n      mdxType: \"Spinner\"\n    }, \"Custom Indicator\")));\n  };\n\n  return SpinnerIndicator;\n}(_react[\"default\"].Component);\n\nexports.SpinnerIndicator = SpinnerIndicator;\nvar propsTables = [{\n  \"name\": \"Spinner\",\n  \"props\": [{\n    \"name\": \"wrapperClassName\",\n    \"type\": \"string\",\n    \"required\": false,\n    \"description\": \"<p>The outermost class property of the Spinner wrapper</p>\\n\",\n    \"default\": \"''\"\n  }, {\n    \"name\": \"isLoading\",\n    \"type\": \"bool\",\n    \"required\": false,\n    \"description\": \"<p>Whether is loading</p>\\n\",\n    \"default\": \"true\"\n  }, {\n    \"name\": \"tip\",\n    \"type\": \"string\",\n    \"required\": false,\n    \"description\": \"<p>Customize the description</p>\\n\"\n  }, {\n    \"name\": \"size\",\n    \"type\": \"'sm' | 'md' | 'lg'\",\n    \"required\": false,\n    \"description\": \"<p>The sizes</p>\\n\",\n    \"default\": \"'md'\"\n  }, {\n    \"name\": \"cover\",\n    \"type\": \"'white' | 'black'\",\n    \"required\": false,\n    \"description\": \"<p>The style of backdrop</p>\\n\",\n    \"default\": \"'white'\"\n  }, {\n    \"name\": \"indicator\",\n    \"type\": \"node\",\n    \"required\": false,\n    \"description\": \"<p>Loading indicator</p>\\n\"\n  }, {\n    \"name\": \"delay\",\n    \"type\": \"number\",\n    \"required\": false,\n    \"description\": \"<p>The delay time of Spinner, default value is <code>300</code></p>\\n\"\n  }]\n}];\nexports.propsTables = propsTables;\nvar col = 16;\nexports.col = col;\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return (0, _react2.mdx)(\"div\", props);\n  };\n};\n\nvar Border = makeShortcode(\"Border\");\nvar Indicator = makeShortcode(\"Indicator\");\nvar layoutProps = {\n  SpinnerBasic: SpinnerBasic,\n  SpinnerTip: SpinnerTip,\n  SpinnerCover: SpinnerCover,\n  SpinnerSize: SpinnerSize,\n  SpinnerIndicator: SpinnerIndicator,\n  propsTables: propsTables,\n  col: col\n};\n\nvar MDXLayout = function MDXLayout(_ref) {\n  var props = (0, _extends2[\"default\"])({}, _ref);\n  return (0, _react2.mdx)(\"div\", null, (0, _react2.mdx)(_ui.Row, null, (0, _react2.mdx)(_ui.Col, {\n    col: \"md-16\"\n  }, (0, _react2.mdx)(\"div\", {\n    className: \"markdown\"\n  }, props.children))), propsTables.length > 0 && (0, _react2.mdx)(_ui.Row, null, (0, _react2.mdx)(_ui.Col, {\n    col: \"md-16\"\n  }, propsTables.map(function (pt) {\n    return (0, _react2.mdx)(_PropsTable[\"default\"], (0, _extends2[\"default\"])({\n      key: pt.name\n    }, pt));\n  }))));\n};\n\nfunction MDXContent(_ref2) {\n  var components = _ref2.components,\n      props = (0, _objectWithoutPropertiesLoose2[\"default\"])(_ref2, [\"components\"]);\n  return (0, _react2.mdx)(MDXLayout, (0, _extends2[\"default\"])({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), (0, _react2.mdx)(\"h2\", null, \"Basic Usage\"), (0, _react2.mdx)(\"p\", null, \"The display and hiding of loading effects are controlled by the value of \", (0, _react2.mdx)(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isLoading\"), \".\"), (0, _react2.mdx)(_Example[\"default\"], {\n    renderModel: \"tabs\",\n    code: \"import { Spinner, Switch } from '@webapp-suite/ui'\\n\\nclass SpinnerBasic extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = { isLoading: false };\\n  }\\n  toggle(value) {\\n    this.setState({ isLoading: value });\\n  }\\n  render() {\\n    const border = {\\n      height: '120px',\\n      lineHeight: '118px',\\n      color: '#aaa',\\n      textAlign: 'center',\\n      border: '1px dashed #ccc'\\n    }\\n    return (\\n      <div>\\n        <div style={{ marginBottom: 16 }}>\\n          Open Spinner\\uFF1A<Switch on={this.state.isLoading} onChange={value => this.toggle(value)} />\\n        </div>\\n        <div style={border}>\\n          <Spinner isLoading={this.state.isLoading}>\\n            Will be overridden by the load effect\\n          </Spinner>\\n        </div>\\n      </div>\\n    )\\n  }\\n}\",\n    mdxType: \"Example\"\n  }, (0, _react2.mdx)(SpinnerBasic, {\n    mdxType: \"SpinnerBasic\"\n  })), (0, _react2.mdx)(\"p\", null, \"This component will ensure that the loading display time is at least \", (0, _react2.mdx)(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"300ms\"), \" to avoid the bad experience as \\\"flash\\\".\"), (0, _react2.mdx)(\"h2\", null, \"Custom description\"), (0, _react2.mdx)(\"p\", null, \"The description of spinner could be changed by the \", (0, _react2.mdx)(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tip\"), \" property\\u3002\"), (0, _react2.mdx)(_Example[\"default\"], {\n    renderModel: \"tabs\",\n    code: \"import { Spinner, Switch } from '@webapp-suite/ui'\\n\\nclass SpinnerTip extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = { isLoading: false };\\n  }\\n  toggle(value) {\\n    this.setState({ isLoading: value });\\n  }\\n  render() {\\n    const border = {\\n      height: '120px',\\n      lineHeight: '118px',\\n      color: '#aaa',\\n      textAlign: 'center',\\n      border: '1px dashed #ccc'\\n    }\\n    return (\\n      <div>\\n        <div style={{ marginBottom: 16 }}>\\n          Open Spinner\\uFF1A<Switch on={this.state.isLoading} onChange={value => this.toggle(value)} />\\n        </div>\\n        <div style={border}>\\n          <Spinner tip=\\\"Loading...\\\" isLoading={this.state.isLoading}>\\n            Custom description\\n          </Spinner>\\n        </div>\\n      </div>\\n    )\\n  }\\n}\",\n    mdxType: \"Example\"\n  }, (0, _react2.mdx)(SpinnerTip, {\n    mdxType: \"SpinnerTip\"\n  })), (0, _react2.mdx)(\"h2\", null, \"Black and White Background\"), (0, _react2.mdx)(\"p\", null, \"The \", (0, _react2.mdx)(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cover\"), \" property is currently provided to select the performance of the spinner background.\"), (0, _react2.mdx)(_Example[\"default\"], {\n    renderModel: \"tabs\",\n    code: \"import { Spinner, Switch } from '@webapp-suite/ui'\\n\\nclass SpinnerCover extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = { isLoading: false };\\n  }\\n  toggle(value) {\\n    this.setState({ isLoading: value });\\n  }\\n  render() {\\n    const border = {\\n      height: '120px',\\n      lineHeight: '118px',\\n      color: '#aaa',\\n      textAlign: 'center',\\n      border: '1px dashed #ccc'\\n    }\\n    return (\\n      <div>\\n        <div style={{ marginBottom: 16 }}>\\n          Open Spinner\\uFF1A<Switch on={this.state.isLoading} onChange={value => this.toggle(value)} />\\n        </div>\\n        <div style={border}>\\n          <Spinner tip=\\\"Loading...\\\" isLoading={this.state.isLoading}>\\n            White background\\n          </Spinner>\\n        </div>\\n        <br />\\n        <div style={border}>\\n          <Spinner tip=\\\"Loading...\\\" cover=\\\"black\\\" isLoading={this.state.isLoading}>\\n            Black background\\n          </Spinner>\\n        </div>\\n      </div>\\n    )\\n  }\\n}\",\n    mdxType: \"Example\"\n  }, (0, _react2.mdx)(SpinnerCover, {\n    mdxType: \"SpinnerCover\"\n  })), (0, _react2.mdx)(\"p\", null, \"The default \", (0, _react2.mdx)(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cover\"), \" is white background.\"), (0, _react2.mdx)(\"h2\", null, \"Size\"), (0, _react2.mdx)(\"p\", null, \"There are three different sizes such as \", (0, _react2.mdx)(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sm\"), \", \", (0, _react2.mdx)(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"md\"), \" and \", (0, _react2.mdx)(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lg\"), \" to meet the requirements in different scenarios.\"), (0, _react2.mdx)(_Example[\"default\"], {\n    renderModel: \"tabs\",\n    code: \"import { Spinner } from '@webapp-suite/ui'\\n\\nconst SpinnerSize = () => {\\n  return (\\n    <>\\n      <Spinner size=\\\"sm\\\" tip=\\\"Loading...\\\"/>\\n      <Spinner tip=\\\"Loading...\\\"/>\\n      <Spinner size=\\\"lg\\\" tip=\\\"Loading...\\\"/>\\n    </>\\n  )\\n}\",\n    mdxType: \"Example\"\n  }, (0, _react2.mdx)(SpinnerSize, {\n    mdxType: \"SpinnerSize\"\n  })), (0, _react2.mdx)(\"p\", null, \"For the global Spinner and the Spinner inside the Aside, it is recommended to use the \", (0, _react2.mdx)(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lg\"), \" size, which will provide a good visual experience in the scene with relatively high height.\"), (0, _react2.mdx)(\"h2\", null, \"Custom Indicator\"), (0, _react2.mdx)(\"p\", null, \"You can create a custom indicator with the \", (0, _react2.mdx)(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"indicator\"), \" property, which need passing a react instance.\"), (0, _react2.mdx)(_Example[\"default\"], {\n    renderModel: \"tabs\",\n    code: \"import { Spinner } from '@webapp-suite/ui'\\nimport styled, { keyframes } from 'styled-components'\\n\\nclass SpinnerIndicator extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = { isLoading: false };\\n    this.spinnerKeyFrames = keyframes`\\n      from {\\n        transform: translate3d(0, 0, 0) rotate(0deg);\\n      }\\n      to {\\n        transform: translate3d(0, 0, 0) rotate(360deg);\\n      }\\n    `\\n    this.Indicator = styled.div`\\n      position: relative;\\n      width: 60px;\\n      height: 60px;\\n      border: 3px solid #00aeff\\n      border-radius: 50%;\\n      border-bottom-color: transparent;\\n      animation: 1s ease-in-out infinite ${this.spinnerKeyFrames};\\n    `\\n    this.Border = styled.div`\\n      height: 120px;\\n      line-height: 118px;\\n      color: #aaa;\\n      text-align: center;\\n      border: 1px dashed #ccc;\\n    `\\n  }\\n  toggle(value) {\\n    this.setState({ isLoading: value });\\n  }\\n  render() {\\n    const { Indicator, Border } = this\\n    return (\\n      <div>\\n        <div style={{ marginBottom: 16 }}>\\n          Open Spinner\\uFF1A<Switch on={this.state.isLoading} onChange={value => this.toggle(value)} />\\n        </div>\\n        <Border>\\n          <Spinner isLoading={this.state.isLoading} indicator={<Indicator />}>\\n            Custom Indicator\\n          </Spinner>\\n        </Border>\\n      </div>\\n    )\\n  }\\n}\",\n    mdxType: \"Example\"\n  }, (0, _react2.mdx)(SpinnerIndicator, {\n    mdxType: \"SpinnerIndicator\"\n  })));\n}\n\n;\nMDXContent.isMDXComponent = true;\n\n//# sourceURL=webpack:///./src/components/Spinner/docs/Spinner.mdx?");

/***/ })

}]);