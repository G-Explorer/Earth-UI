/**
 * @title Basic Usage
 * @desc The display and hiding of loading effects are controlled by the value of `isLoading`.
 * @note This component will ensure that the loading display time is at least `300ms` to avoid the bad experience as "flash".
 */
import { Spinner, Switch } from 'earth-ui'

class SpinnerBasic extends React.Component {
  state = { isLoading: false }
  toggle = value => {
    this.setState({ isLoading: value });
  }
  render() {
    const border = {
      height: '120px',
      lineHeight: '118px',
      color: '#aaa',
      textAlign: 'center',
      border: '1px dashed #ccc'
    }
    return (
      <div>
        <div style={{ marginBottom: 16 }}>
          Open Spinner：<Switch on={this.state.isLoading} onChange={this.toggle} />
        </div>
        <div style={border}>
          <Spinner isLoading={this.state.isLoading}>
            Will be overridden by the load effect
          </Spinner>
        </div>
      </div>
    )
  }
}

/**
 * @title Custom description
 * @desc The description of spinner could be changed by the `tip` property。
 */
import { Spinner, Switch } from 'earth-ui'

class SpinnerTip extends React.Component {
  state = { isLoading: false }
  toggle = value => {
    this.setState({ isLoading: value });
  }
  render() {
    const border = {
      height: '120px',
      lineHeight: '118px',
      color: '#aaa',
      textAlign: 'center',
      border: '1px dashed #ccc'
    }
    return (
      <div>
        <div style={{ marginBottom: 16 }}>
          Open Spinner：<Switch on={this.state.isLoading} onChange={this.toggle} />
        </div>
        <div style={border}>
          <Spinner tip="Loading..." isLoading={this.state.isLoading}>
            Custom description
          </Spinner>
        </div>
      </div>
    )
  }
}

/**
 * @title Black and White Background
 * @desc The `cover` property is currently provided to select the performance of the spinner background.
 * @note The default `cover` is white background.
 */
import { Spinner, Switch } from 'earth-ui'

class SpinnerCover extends React.Component {
  state = { isLoading: false }
  toggle = value => {
    this.setState({ isLoading: value });
  }
  render() {
    const border = {
      height: '120px',
      lineHeight: '118px',
      color: '#aaa',
      textAlign: 'center',
      border: '1px dashed #ccc'
    }
    return (
      <div>
        <div style={{ marginBottom: 16 }}>
          Open Spinner：<Switch on={this.state.isLoading} onChange={this.toggle} />
        </div>
        <div style={border}>
          <Spinner tip="Loading..." isLoading={this.state.isLoading}>
            White background
          </Spinner>
        </div>
        <br />
        <div style={border}>
          <Spinner tip="Loading..." cover="black" isLoading={this.state.isLoading}>
            Black background
          </Spinner>
        </div>
      </div>
    )
  }
}

/**
 * @title Size
 * @desc There are three different sizes such as `sm`, `md` and `lg` to meet the requirements in different scenarios.
 * @note For the global Spinner and the Spinner inside the Aside, it is recommended to use the `lg` size, which will provide a good visual experience in the scene with relatively high height.
 */
import { Spinner } from 'earth-ui'

const SpinnerSize = () => {
  return (
    <div>
      <Spinner size="sm" tip="Loading..."/>
      <Spinner tip="Loading..."/>
      <Spinner size="lg" tip="Loading..."/>
    </div>
  )
}

/**
 * @title Custom Indicator
 * @desc You can create a custom indicator with the `indicator` property, which need passing a react instance.
 */
import { Spinner } from 'earth-ui'
import styled, { keyframes } from 'styled-components'

class SpinnerIndicator extends React.Component {
  state = { isLoading: false }
  toggle = value => {
    this.setState({ isLoading: value });
  }
  spinnerKeyFrames = keyframes`
    from {
      transform: translate3d(0, 0, 0) rotate(0deg);
    }
    to {
      transform: translate3d(0, 0, 0) rotate(360deg);
    }
  `
  Indicator = styled.div`
    position: relative;
    width: 60px;
    height: 60px;
    border: 3px solid #00aeff
    border-radius: 50%;
    border-bottom-color: transparent;
    animation: 1s ease-in-out infinite ${this.spinnerKeyFrames};
  `
  Border = styled.div`
    height: 120px;
    line-height: 118px;
    color: #aaa;
    text-align: center;
    border: 1px dashed #ccc;
  `
  render() {
    const { Indicator, Border } = this
    return (
      <div>
        <div style={{ marginBottom: 16 }}>
          Open Spinner：<Switch on={this.state.isLoading} onChange={this.toggle} />
        </div>
        <Border>
          <Spinner isLoading={this.state.isLoading} indicator={<Indicator />}>
            Custom Indicator
          </Spinner>
        </Border>
      </div>
    )
  }
}

@component Spinner
